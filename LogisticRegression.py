import numpy as np
  
class LogisticRegressionSML():
    
    """
    Logistic Regression.

    Implements Logistic Regression based on Gradient Descent or Stochastic Gradient Descent (SGD)

    """

    def __init__(self,learning_rate=0.01,num_iterations=1000,lambda_val=0.01,regularization=False,verbose=False):
        """
        __init__

        Initializes the parameters to their default values

        """
        self.coefficients = None
        self.learning_rate = learning_rate
        self.num_iterations = num_iterations
        #self.lambda_val = lambda_val
        #self.regularization = False
        self.verbose = verbose
    
    def fit(self,X,y,method='gradientdesc'):
        """
        Fit.

        It fits the coefficientes w = (w1,...,wn) to the data.
        Two approaches are supported: "gd" or "sgd"

        Parameters
        ----------
        X : numpy.ndarray. Shape (n_samples,n_features)
            Training data.

        y : numpy.ndarray. Shape (n_samples,)
            Target training data.

        method : string.
                The method used to estimate the coefficients of the logistic model.

        Returns
        -------
        self : object
            Fitted model

        """
        if method == "gd":
          self.fit_gd(X,y)
        elif method == "sgd":
          self.fit_sgd(X,y)
        else:
          raise ValueError("Invalid fitting method. Please choose 'gd' or 'sgd'.")
    
    #def fit_gd(self,X,y):
      #n_samples, n_features = X.shape
      #ones = np.ones((n_samples,1))
      #X = np.hstack((ones,X))
      #self.coefficients = np.zeros(n_features+1)

      #return 

      

class LogisticRegressionSML:
    """
    A class used to represent a Logistic Regression model.

    ...

    Attributes
    ----------
    learning_rate : float
        Learning rate for the optimizer (default is 0.01).
    num_iterations : int
        Number of iterations for the optimizer (default is 1000).
    verbose : bool
        Verbose mode for outputting training process (default is False).
    coefficients : numpy.ndarray
        The coefficients of the logistic regression model.

    Methods
    -------
    fit(X, y, method='gradientdesc')
        Fits the logistic regression model using specified method.
    fit_gd(X, y)
        Fits the logistic regression model using gradient descent.
    fit_sgd(X, y)
        Fits the logistic regression model using stochastic gradient descent.
    predict(X)
        Predicts the target values with the fitted logistic regression model.
    evaluate(X, y)
        Evaluates the predictions generated by the fitted model.
    _logistic_function(x)
        Computes the logistic function.
    """

    def __init__(self, learning_rate=0.01, num_iterations=1000, verbose=False):
        """
        Parameters
        ----------
        learning_rate : float, optional
            Learning rate for the optimizer (default is 0.01).
        num_iterations : int, optional
            Number of iterations for the optimizer (default is 1000).
        verbose : bool, optional
            Verbose mode for outputting the training process (default is False).
        """
        self.learning_rate = learning_rate
        self.num_iterations = num_iterations
        self.verbose = verbose
        self.coefficients = None

    def fit(self, X, y, method="gradientdesc"):
        """
        Fits the logistic regression model using the specified method.

        Parameters
        ----------
        X : numpy.ndarray
            Training data of shape (n_samples, n_features).
        y : numpy.ndarray
            Target training data of shape (n_samples,).
        method : str, optional
            Optimization method to be used ('gradientdesc' or 'stochasticgradientdesc').

        Raises
        ------
        ValueError
            If an invalid method is provided.
        """
        if method == "gradientdesc":
            self.fit_gd(X, y)
        elif method == "stochasticgradientdesc":
            self.fit_sgd(X, y)
        else:
            raise ValueError("Invalid fitting method. Please choose 'gradientdesc' or 'stochasticgradientdesc'.")

    def fit_gd(self, X, y):
        """Fits the logistic regression model using gradient descent."""
        # Implementation here...

    def fit_sgd(self, X, y):
        """Fits the logistic regression model using stochastic gradient descent."""
        # Implementation here...

    def predict(self, X):
        """
        Predicts target values with the fitted logistic regression model.

        Parameters
        ----------
        X : numpy.ndarray
            Data to generate predictions on, shape (n_samples, n_features).

        Returns
        -------
        numpy.ndarray
            Generated predictions of shape (n_samples,).
        """
        # Implementation here...

    def evaluate(self, X, y):
        """
        Evaluates the predictions generated by the fitted model.

        Parameters
        ----------
        X : numpy.ndarray
            Test data of shape (n_samples, n_features).
        y : numpy.ndarray
            Target test data of shape (n_samples,).

        Returns
        -------
        float
            Calculated accuracy metric.
        """
        # Implementation here...

    def _logistic_function(self, x):
        """
        Computes the logistic function.

        Parameters
        ----------
        x : float or numpy.ndarray
            Input value or array of values

        Returns
        -------
        float or numpy.ndarray
            Computed logistic function value or array of values
        """
        return 1 / (1 + np.exp(-x))
